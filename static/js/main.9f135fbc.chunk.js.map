{"version":3,"sources":["serviceWorker.js","redux/reducer.js","redux/store.js","StopWatch.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","hours","minutes","seconds","status","statusPause","timer","pause","type","start","startIs","finish","reducer","state","action","store","createStore","applyMiddleware","thunkMiddleware","connect","dispatch","stop","getState","clearInterval","setInterval","props","className","onClick","disabled","particlesOpt","particles","number","value","denisty","enable","value_area","App","params","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6kBClBC,IAMDC,EAAe,CACjBC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,OAAQ,QACRC,YAAa,QACbC,MAAO,GAmGEC,EAAQ,iBAAO,CAACC,KA/GR,UAgHRC,EAAQ,SAACH,GAAD,MAAY,CAACE,KA/Gb,QA+G0BF,UAClCI,EAAU,SAACJ,GAAD,MAAY,CAACE,KA/GZ,WA+G4BF,UACvCK,EAAS,iBAAO,CAACH,KA/GR,WAiHPI,EA5EC,WAAmC,IAAlCC,EAAiC,uDAAzBb,EAAcc,EAAW,uCAC9C,OAAQA,EAAON,MACX,IAvCc,SAwCV,OAAO,EAAP,GACOK,EADP,CAEIV,QAASU,EAAMV,QAAU,EACzBD,QAASW,EAAMX,QAAU,EACzBD,MAAOY,EAAMZ,MAAQ,EACrBG,OAAQS,EAAMT,OAAS,UAE/B,IAjDa,QAkDT,OAAIS,EAAMV,SAAW,GACV,EAAP,GACOU,EADP,CAEIV,QAASU,EAAMV,QAAU,EACzBD,QAASW,EAAMX,QAAU,EACzBI,MAAOQ,EAAOR,QAEZO,EAAMX,SAAW,GACb,EAAP,GACOW,EADP,CAEIX,QAASW,EAAMX,QAAU,EACzBD,MAAOY,EAAMZ,MAAQ,EACrBK,MAAOQ,EAAOR,QAGlB,EAAP,GACOO,EADP,CAEIV,QAASU,EAAMV,QAAUU,EAAMV,QAAU,EACzCC,OAAQS,EAAMT,OAAS,OACvBE,MAAOQ,EAAOR,QAGtB,IAzEa,QA0ET,OAAO,EAAP,GACOO,EADP,CAEIV,QAASU,EAAMV,QACfE,YAAaQ,EAAMR,YAAc,UAIzC,IA/EgB,WAgFZ,OAAIQ,EAAMV,SAAW,GACV,EAAP,GACOU,EADP,CAEIV,QAASU,EAAMV,QAAU,EACzBD,QAASW,EAAMX,QAAU,EACzBI,MAAOQ,EAAOR,QAEZO,EAAMX,SAAW,GAChB,EAAP,GACOW,EADP,CAEIX,QAASW,EAAMX,QAAU,EACzBD,MAAOY,EAAMZ,MAAQ,EACrBK,MAAOQ,EAAOR,QAGX,EAAP,GACOO,EADP,CAEIV,QAASU,EAAMV,QAAUU,EAAMV,QAAU,EACzCE,YAAaQ,EAAMR,YAAc,QACjCC,MAAOQ,EAAOR,QAKtB,QACA,OAAOO,I,QClGJE,EALDC,YACVJ,EACAK,YAAgBC,M,MCcpB,IA2BeC,cA3BO,SAACN,GACrB,MAAO,CACLZ,MAAOY,EAAMZ,MACbC,QAASW,EAAMX,QACfC,QAASU,EAAMV,QACfC,OAAQS,EAAMT,OACdC,YAAaQ,EAAMR,cAIE,SAACe,GACxB,MAAO,CACLC,KAAM,WACFD,EFXsB,SAACA,EAAUE,GACrCC,cAAcD,IAAWhB,OACzBc,EAAST,QEWTF,MAAO,WACLW,EFpBqB,SAACA,EAAUE,GAClC,IAAIhB,EAAQkB,YAAY,WACpBJ,EAASX,EAAMH,KAChB,QEmBHC,MAAO,WACLa,EFZuB,SAACA,EAAUE,GACpCC,cAAcD,IAAWhB,OACzBc,EAASb,QEYTG,QAAS,WACPU,EFVyB,SAACA,GAC5B,IAAId,EAAQkB,YAAY,WACpBJ,EAASV,EAAQJ,KAClB,UEYQa,CA1Cf,SAAmBM,GAEjB,OACE,yBAAKC,UAAU,aACb,uCACA,yBAAKA,UAAU,SAASD,EAAMxB,MAA9B,MAAwCwB,EAAMvB,QAA9C,MAA0DuB,EAAMtB,SAChE,6BACA,4BAAQuB,UAAU,MAAMC,QAA0B,UAAjBF,EAAMrB,OAAoBqB,EAAMhB,MAAQgB,EAAMJ,MAC9EI,EAAMrB,QACP,4BAAQsB,UAAU,MAAME,SAA2B,UAAjBH,EAAMrB,OAAoBuB,QAA+B,UAAtBF,EAAMpB,YAAyBoB,EAAMlB,MAAQkB,EAAMf,SACvHe,EAAMpB,gB,iBCVPwB,EAAe,CACnBC,UAAW,CACPC,OAAQ,CACJC,MAAO,IACPC,QAAS,CACLC,QAAQ,EACRC,WAAY,QAkBXC,MAXf,SAAaX,GACX,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YAAYW,OAAQR,IACzC,kBAAC,EAAD,QCZNS,IAASC,OACL,kBAAC,IAAD,CAAUxB,MAAOA,GACb,kBAAC,EAAD,OAERyB,SAASC,eAAe,SLmHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9f135fbc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const PAUSE = 'PAUSE';\r\nexport const START = 'START';\r\nexport const START_IS = 'START-IS';\r\nexport const FINISH = 'FINISH';\r\n\r\n\r\nconst initialState = {\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n    status: 'START',\r\n    statusPause: 'PAUSE',\r\n    timer: 0,\r\n}\r\n\r\n\r\nexport const runTC = () => (dispatch, getState) => { \r\n    let timer = setInterval(() => {\r\n        dispatch(start(timer))\r\n    }, 1000);\r\n}\r\n\r\nexport const finishTC = () => (dispatch, getState) => { \r\n    clearInterval(getState().timer)\r\n    dispatch(finish());\r\n}\r\n\r\nexport const pauseTC = () => (dispatch, getState) => {\r\n    clearInterval(getState().timer)\r\n    dispatch(pause())\r\n}\r\n\r\nexport const startIsTC = () => (dispatch) => {\r\n    let timer = setInterval(() => {\r\n        dispatch(startIs(timer))\r\n    }, 1000);\r\n    \r\n}\r\n    \r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FINISH:\r\n            return {\r\n                ...state,\r\n                seconds: state.seconds = 0,\r\n                minutes: state.minutes = 0,\r\n                hours: state.hours = 0,\r\n                status: state.status = 'START'\r\n            }\r\n        case START:\r\n            if (state.seconds >= 59 ) {\r\n                return {\r\n                    ...state,\r\n                    seconds: state.seconds = 0,\r\n                    minutes: state.minutes + 1,\r\n                    timer: action.timer\r\n                }\r\n            } else if(state.minutes >= 59) {\r\n                   return {\r\n                       ...state,\r\n                       minutes: state.minutes = 0,\r\n                       hours: state.hours + 1,\r\n                       timer: action.timer\r\n                   }\r\n            } else{\r\n            return {\r\n                ...state,\r\n                seconds: state.seconds = state.seconds + 1,\r\n                status: state.status = 'STOP',\r\n                timer: action.timer\r\n            }\r\n            }\r\n        case PAUSE:\r\n            return {\r\n                ...state,\r\n                seconds: state.seconds,\r\n                statusPause: state.statusPause = 'START',\r\n                // status: state.status = 'STOP',\r\n                \r\n            }\r\n        case START_IS:\r\n            if (state.seconds >= 59) {\r\n                return {\r\n                    ...state,\r\n                    seconds: state.seconds = 0,\r\n                    minutes: state.minutes + 1,\r\n                    timer: action.timer\r\n                }\r\n            } else if(state.minutes >= 59) {\r\n                return {\r\n                    ...state,\r\n                    minutes: state.minutes = 0,\r\n                    hours: state.hours + 1,\r\n                    timer: action.timer\r\n                }\r\n         } else {\r\n                return {\r\n                    ...state,\r\n                    seconds: state.seconds = state.seconds + 1,\r\n                    statusPause: state.statusPause = 'PAUSE',\r\n                    timer: action.timer\r\n                    // status: state.status = 'STOP',\r\n\r\n                }\r\n            }\r\n            default:\r\n            return state;\r\n        }\r\n};\r\n\r\nexport const pause = () => ({type: PAUSE});\r\nexport const start = (timer) => ({type: START, timer});\r\nexport const startIs = (timer) => ({type: START_IS, timer});\r\nexport const finish = () => ({type: FINISH});\r\n\r\nexport default reducer;","import {createStore, applyMiddleware} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    applyMiddleware(thunkMiddleware)\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport { runTC, finishTC, pauseTC, startIsTC } from './redux/reducer';\r\n\r\nfunction StopWatch(props) {\r\n  \r\n  return (\r\n    <div className='stopWatch'>\r\n      <h1>Counter</h1>\r\n      <div className='watch'>{props.hours} : {props.minutes} : {props.seconds}</div>\r\n      <br/>\r\n      <button className='but' onClick={props.status === 'START'? props.start : props.stop}>\r\n      {props.status}</button>\r\n      <button className='but' disabled={props.status === 'START'} onClick={props.statusPause === 'PAUSE'? props.pause : props.startIs}>\r\n      {props.statusPause}</button>  \r\n    </div>\r\n  );\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    hours: state.hours,\r\n    minutes: state.minutes,\r\n    seconds: state.seconds,\r\n    status: state.status,\r\n    statusPause: state.statusPause\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    stop: () => {\r\n        dispatch(finishTC());\r\n    },\r\n    start: () => {\r\n      dispatch(runTC())\r\n    },\r\n    pause: () => {\r\n      dispatch(pauseTC())\r\n    },\r\n    startIs: () => {\r\n      dispatch(startIsTC())\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StopWatch);","import React from 'react';\nimport './App.css';\nimport StopWatch from './StopWatch';\nimport Particles from 'react-particles-js';\n\nconst particlesOpt = {\n  particles: {\n      number: {\n          value: 150,\n          denisty: {\n              enable: true,\n              value_area: 1000\n          }\n      }\n  }\n}\n\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <Particles className='particles' params={particlesOpt}/>\n      <StopWatch />      \n    </div>\n  );\n\n\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}